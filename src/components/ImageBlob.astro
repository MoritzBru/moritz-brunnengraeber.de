---
import type { HTMLAttributes } from "astro/types";
import type { ImageMetadata } from "astro";
import { getImage } from "astro:assets";
import { svgPath } from "blobs/v2";
import { getId } from "@/utils/id";

interface Props extends HTMLAttributes<"svg"> {
  imgPath: ImageMetadata;
  seed?: number;
  extraPoints?: number;
  randomness?: number;
  size?: number;
  dur?: string | number;
}

const {
  class: className,
  imgPath,
  seed = Math.random(),
  extraPoints = 6,
  randomness = 6,
  size = 256,
  dur = "12s",
  ...attrs
} = Astro.props;

const optimizedImage = await getImage({
  src: imgPath,
  width: 1024,
  height: 1024,
});

const paths = [
  svgPath({ seed: seed, extraPoints, randomness, size }),
  svgPath({ seed: seed + 1, extraPoints, randomness, size }),
  svgPath({ seed: seed + 2, extraPoints, randomness, size }),
  svgPath({ seed: seed + 3, extraPoints, randomness, size }),
  svgPath({ seed: seed, extraPoints, randomness, size }),
];

const id = getId();
---

<svg
  xmlns="http://www.w3.org/2000/svg"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  viewBox={`0 0 ${size} ${size}`}
  class={className}
  aria-hidden="true"
  {...attrs}
>
  <image
    x="0"
    y="0"
    width="100%"
    height="100%"
    clip-path={`url(#${id})`}
    href={optimizedImage.src}
    preserveAspectRatio="none meet"
    class=""
  />
  <clipPath id={id}>
    <path>
      <animate
        attributeName="d"
        values={paths.join(";")}
        dur={dur}
        repeatCount="indefinite"
        calcMode="spline"
        keySplines={[...new Array(paths.length - 1)]
          .map(() => ".15 0 .85 1")
          .join(";")}></animate>
    </path>
  </clipPath>
</svg>
