---
import type { HTMLAttributes } from 'astro/types';

type Props = HTMLAttributes<'canvas'>;

const { class: className, ...attrs } = Astro.props;
---

<canvas
  data-particles
  class:list={[className]}
  {...attrs}
></canvas>

<script>
  type Dot = {
    x: number;
    y: number;
    vx?: number;
    vy?: number;
  };

  class ParticleCanvas {
    canvas: HTMLCanvasElement;
    ctx: CanvasRenderingContext2D;
    dots: Dot[] = [];
    mouse: Dot | null = null;

    constructor(canvas: Element) {
      if (canvas instanceof HTMLCanvasElement) {
        this.canvas = canvas;
      } else {
        throw new Error('querySelector is not a canvas element');
      }
      const ctx = this.canvas.getContext('2d');
      if (ctx instanceof CanvasRenderingContext2D) {
        this.ctx = ctx;
      } else {
        throw new Error('could not get drawing context');
      }

      const numberOfDots = Math.floor(Math.max(this.w, this.h) / 10);
      this.dots = [...Array(numberOfDots)].map(() => this.makeDot());

      this.setupSize();
      window.addEventListener('resize', this.setupSize.bind(this));
      this.canvas.addEventListener('mousemove', (evt) => {
        this.mouse = {
          x: evt.offsetX,
          y: evt.offsetY,
        };
      });

      let lastCallTime: number;
      const tick: FrameRequestCallback = (timeStamp) => {
        this.drawScene();
        const fps = 1 / ((timeStamp - lastCallTime) / 1000);
        lastCallTime = timeStamp;
        this.updateDots(fps);
        requestAnimationFrame(tick);
      };

      requestAnimationFrame((timestap) => {
        lastCallTime = timestap;
        tick(timestap);
      });
    }

    private get w() {
      return this.canvas.clientWidth;
    }

    private get h() {
      return this.canvas.clientHeight;
    }

    private get maxLineLength() {
      return Math.min(Math.floor(Math.max(this.w, this.h) / 12), 124);
    }

    private makeDot(): Dot {
      return {
        x: Math.random() * this.w,
        y: Math.random() * this.h,
        vx: Math.floor((Math.random() * this.h) / 12 - (Math.random() * this.h) / 15),
        vy: Math.floor((Math.random() * this.h) / 12 - (Math.random() * this.h) / 15),
      };
    }

    private distance(point1: Dot, point2: Dot) {
      return Math.sqrt((point2.x - point1.x) ** 2 + (point2.y - point1.y) ** 2);
    }

    private drawDot(dot: Dot) {
      this.ctx.beginPath();
      this.ctx.arc(dot.x, dot.y, 2, 0, 2 * Math.PI, false);
      this.ctx.fillStyle = getComputedStyle(this.canvas).color;
      this.ctx.fill();
    }

    private drawLine(dot1: Dot, dot2: Dot, maxLength = this.maxLineLength) {
      const length = this.distance(dot1, dot2);
      const opacity = (maxLength - length) / (0.1 * maxLength);
      this.ctx.beginPath();
      this.ctx.moveTo(dot1.x, dot1.y);
      this.ctx.lineTo(dot2.x, dot2.y);
      this.ctx.lineWidth = 0.3;
      this.ctx.strokeStyle = getComputedStyle(this.canvas).color;
      this.ctx.globalAlpha = opacity;
      this.ctx.stroke();
      this.ctx.globalAlpha = 1;
    }

    private drawScene() {
      this.ctx?.clearRect(0, 0, this.w, this.h);

      this.dots.forEach((dot1, idx) => {
        this.drawDot(dot1);
        if (this.mouse && this.distance(this.mouse, dot1) < this.maxLineLength * 2) {
          this.drawLine(this.mouse, dot1, this.maxLineLength * 2);
        }
        this.dots.slice(0, idx).forEach((dot2) => {
          if (this.distance(dot1, dot2) < this.maxLineLength) {
            this.drawLine(dot1, dot2);
          }
        });
      });
    }

    private updateDots(fps: number) {
      this.dots.forEach((dot) => {
        if (!dot.vx || !dot.vy) return;
        dot.x += dot.vx / fps;
        dot.y += dot.vy / fps;

        if (dot.x < 0 || dot.x > this.w) dot.vx = -dot.vx;
        if (dot.y < 0 || dot.y > this.h) dot.vy = -dot.vy;
      });
    }

    private setupSize() {
      this.canvas.width = this.w;
      this.canvas.height = this.h;

      const numberOfDots = Math.floor(Math.max(this.w, this.h) / 10);
      this.dots = [...Array(numberOfDots)].map(() => this.makeDot());
    }
  }

  document.querySelectorAll('[data-particles]').forEach((el) => new ParticleCanvas(el));
</script>
